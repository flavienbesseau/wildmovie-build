{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/flaviostark/wildcodeschool/projets/tlse0920-js-p2-wildmovies/src/components/FicheFilm.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport { ContainerGlobal, DetailsMovies, LeftDetails, Synopsis, DetailsRight, LiDetails, Infos, Image, DetailImage, H1, H3 } from \"../style/FicheFilmCss\";\nimport { IMAGE_BASE_URL } from \"../const/Const\";\nimport Trailer from \"./Trailer\";\nimport keyApi from \"../const/apiKey\";\nimport Recommendations from \"./Recommendations\";\n\nclass FicheFilm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getMovie = () => {\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props;\n      const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${keyApi}&language=en-US`;\n      axios.get(url).then(response => response.data).then(movieObject => this.setState({\n        movie: movieObject\n      }));\n    };\n\n    this.getCredits = () => {\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props;\n      const url = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${keyApi}`;\n      axios.get(url).then(response => response.data).then(data => this.setState({\n        cast: data.cast,\n        crew: data.crew\n      }));\n    };\n\n    this.state = {\n      cast: [],\n      crew: [],\n      movie: {\n        adult: null,\n        poster_path: \"\",\n        genres: [],\n        original_language: \"\",\n        title: \"\",\n        release_date: \"\",\n        runtime: 0,\n        vote_average: 0,\n        overview: \"\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getCredits();\n    this.getMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevMovie = prevProps.match.params.id;\n    const {\n      match: {\n        params: {\n          id\n        }\n      }\n    } = this.props;\n\n    if (prevMovie !== id) {\n      this.getCredits();\n      this.getMovie();\n    }\n  }\n\n  render() {\n    const {\n      cast,\n      crew,\n      movie\n    } = this.state;\n    const {\n      movie: {\n        genres\n      }\n    } = this.state;\n    const date = new Date(movie.release_date);\n    return /*#__PURE__*/_jsxDEV(ContainerGlobal, {\n      children: [/*#__PURE__*/_jsxDEV(Trailer, {\n        id: movie.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DetailsMovies, {\n        children: [/*#__PURE__*/_jsxDEV(LeftDetails, {\n          children: [/*#__PURE__*/_jsxDEV(H1, {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [date.getFullYear(), \" -\", movie.runtime, \"min -\", movie.vote_average, \"/10\", movie.adult ? \"(Adult)\" : \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(H3, {\n            children: \"Synopsis:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Synopsis, {\n            children: movie.overview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(H3, {\n            children: \"Recommendations:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Recommendations, {\n            id: movie.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DetailImage, {\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: IMAGE_BASE_URL + movie.poster_path,\n            alt: movie.title,\n            width: \"300px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Infos, {\n            children: [/*#__PURE__*/_jsxDEV(DetailsRight, {\n              children: \"Genre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), genres.map(genre => /*#__PURE__*/_jsxDEV(LiDetails, {\n              children: genre.name\n            }, genre.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(DetailsRight, {\n              children: \"Casting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), cast.filter(acteur => acteur.order < 3).map(item => /*#__PURE__*/_jsxDEV(LiDetails, {\n              children: item.name\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(DetailsRight, {\n              children: \"Director\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), crew.filter(realisateur => realisateur.job === \"Director\").map(item => /*#__PURE__*/_jsxDEV(LiDetails, {\n              children: item.name\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(DetailsRight, {\n              children: \"Original language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LiDetails, {\n              children: movie.original_language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nFicheFilm.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default FicheFilm;","map":{"version":3,"sources":["/home/flaviostark/wildcodeschool/projets/tlse0920-js-p2-wildmovies/src/components/FicheFilm.jsx"],"names":["React","Component","axios","PropTypes","ContainerGlobal","DetailsMovies","LeftDetails","Synopsis","DetailsRight","LiDetails","Infos","Image","DetailImage","H1","H3","IMAGE_BASE_URL","Trailer","keyApi","Recommendations","FicheFilm","constructor","props","getMovie","match","params","id","url","get","then","response","data","movieObject","setState","movie","getCredits","cast","crew","state","adult","poster_path","genres","original_language","title","release_date","runtime","vote_average","overview","componentDidMount","componentDidUpdate","prevProps","prevMovie","render","date","Date","getFullYear","map","genre","name","filter","acteur","order","item","realisateur","job","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport {\n  ContainerGlobal,\n  DetailsMovies,\n  LeftDetails,\n  Synopsis,\n  DetailsRight,\n  LiDetails,\n  Infos,\n  Image,\n  DetailImage,\n  H1,\n  H3,\n} from \"../style/FicheFilmCss\";\nimport { IMAGE_BASE_URL } from \"../const/Const\";\nimport Trailer from \"./Trailer\";\nimport keyApi from \"../const/apiKey\";\nimport Recommendations from \"./Recommendations\";\n\nclass FicheFilm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cast: [],\n      crew: [],\n      movie: {\n        adult: null,\n        poster_path: \"\",\n        genres: [],\n        original_language: \"\",\n        title: \"\",\n        release_date: \"\",\n        runtime: 0,\n        vote_average: 0,\n        overview: \"\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.getCredits();\n    this.getMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevMovie = prevProps.match.params.id;\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n    if (prevMovie !== id) {\n      this.getCredits();\n      this.getMovie();\n    }\n  }\n\n  getMovie = () => {\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n    const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${keyApi}&language=en-US`;\n    axios\n      .get(url)\n      .then((response) => response.data)\n      .then((movieObject) => this.setState({ movie: movieObject }));\n  };\n\n  getCredits = () => {\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n    const url = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${keyApi}`;\n    axios\n      .get(url)\n      .then((response) => response.data)\n      .then((data) =>\n        this.setState({\n          cast: data.cast,\n          crew: data.crew,\n        })\n      );\n  };\n\n  render() {\n    const { cast, crew, movie } = this.state;\n    const {\n      movie: { genres },\n    } = this.state;\n    const date = new Date(movie.release_date);\n    return (\n      <ContainerGlobal>\n        <Trailer id={movie.id} />\n        <DetailsMovies>\n          <LeftDetails>\n            <H1>{movie.title}</H1>\n            <h4>\n              {date.getFullYear()} -{movie.runtime}min -{movie.vote_average}/10\n              {movie.adult ? \"(Adult)\" : \"\"}\n            </h4>\n            <H3>Synopsis:</H3>\n            <Synopsis>{movie.overview}</Synopsis>\n            <H3>Recommendations:</H3>\n            <Recommendations id={movie.id} />\n          </LeftDetails>\n\n          <DetailImage>\n            <Image\n              src={IMAGE_BASE_URL + movie.poster_path}\n              alt={movie.title}\n              width=\"300px\"\n            />\n            <Infos>\n              <DetailsRight>Genre</DetailsRight>\n              {genres.map((genre) => (\n                <LiDetails key={genre.id}>{genre.name}</LiDetails>\n              ))}\n              <DetailsRight>Casting</DetailsRight>\n              {cast\n                .filter((acteur) => acteur.order < 3)\n                .map((item) => (\n                  <LiDetails key={item.id}>{item.name}</LiDetails>\n                ))}\n              <DetailsRight>Director</DetailsRight>\n              {crew\n                .filter((realisateur) => realisateur.job === \"Director\")\n                .map((item) => (\n                  <LiDetails key={item.id}>{item.name}</LiDetails>\n                ))}\n              <DetailsRight>Original language</DetailsRight>\n              <LiDetails>{movie.original_language}</LiDetails>\n            </Infos>\n          </DetailImage>\n        </DetailsMovies>\n      </ContainerGlobal>\n    );\n  }\n}\n\nFicheFilm.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default FicheFilm;\n"]},"metadata":{},"sourceType":"module"}